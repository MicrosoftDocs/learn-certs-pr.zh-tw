### YamlMime:Course
title: Designing and Implementing Microsoft DevOps solutions
metadata:
  title: 'Course AZ-400T00-A: Designing and Implementing Microsoft DevOps solutions'
  description: 'Course AZ-400T00-A: Designing and Implementing Microsoft DevOps solutions'
uid: course.az-400t00
courseNumber: 'AZ-400T00-A'
hoursToComplete: 120
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: 規劃共用目標和時間表的轉換
- skill: 選擇項目並確定項目指標和關鍵績效指標 (KPI's)
- skill: 創建團隊和敏捷的組織結構
- skill: 設計工具集成策略
- skill: 設計授權管理策略（例如 Azure DevOps 和 GitHub 用戶）
- skill: 設計從工作專案到工作軟體的端到端可追溯性策略
- skill: 設計身份驗證和訪問策略
- skill: 設計集成本地和 cloud 資源的策略
- skill: 描述使用源控制的好處
- skill: 描述 Azure Repos 和 GitHub
- skill: 從 TFVC 遷移到 Git
- skill: 管理代碼品質，包括技術負債 SonarCloud 和其他工具解決方案
- skill: 建立關於代碼品質的組織知識
- skill: 說明如何構造 Git repos 
- skill: 描述 Git 分支工作流程
- skill: 利用 pull 請求進行協作和代碼評審
- skill: 利用 Git 鉤子實現自動化
- skill: 使用 Git 培養整個組織的內部資源
- skill: 說明 Azure Pipelines 及其元件的作用
- skill: 配置代理以在 Azure Pipelines 中使用
- skill: 說明為什麼持續集成很重要
- skill: 使用 Azure Pipelines 實現持續集成
- skill: 定義現場可靠性工程
- skill: 設計流程以衡量最終使用者滿意度並分析用戶回饋
- skill: 設計流程以自動化應用程式分析
- skill: 管理警報並減少無意義和不可操作的警報
- skill: 進行無懈可擊的回顧，創造公正的文化
- skill: 為發佈管道和應用程式基礎設施定義基礎設施和配置策略以及適當的工具集
- skill: 在應用程式基礎設施中實現合規性和安全性
- skill: 描述集成開源軟體的潛在挑戰
- skill: 檢查開源套裝軟體的安全性和許可合規性
- skill: 管理組織安全和合規政策
- skill: 將許可證和漏洞掃描集成到構建和部署管道中
- skill: 配置構建管道以訪問包的安全性和許可等級
learningPartnersLink: /learn/certifications/partners
locales:
- en
levels:
- advanced
roles:
- devops-engineer
products:
- azure
- azure-devops
- azure-kubernetes-service
- azure-container-instances
- azure-automation
exams:
- uid: exam.az-400
summary: |-
  本課程提供設計和實作 DevOps 流程和最佳做法的知識和技能。學生將學習如何規劃 DevOps，使用原始檔控制，為企業擴充 Git，合併 Artifacts，設計相依性管理策略，管理密碼，實作持續整合，實作容器組建策略，設計發行策略，設定發行管理工作流程，實作部署模式並最佳化回饋機制。

  #### 對象設定檔
  本課程的學生有興趣設計和實施 DevOps 過程或通過 Microsoft Azure DevOps Solutions 認證考試。
prerequisitesSection: |-
  成功的學習者將具備以下知識並瞭解&#58;
  - Cloud 計算概念，包括對PaaS、SaaS 和 IaaS 實施的瞭解。
  -無論是 Azure 管理還是 Azure 開發，都至少在其中一個領域擁有成熟的專業技能。
  - 版本控制、Agile 軟體發展和核心軟體發展原則。在一個提供軟體的組織中有經驗是很有幫助的。
  
  如果您是 Azure 和 cloud 計算的新手，請考慮以下資源之一&#58;
  - 免費線上：Azure Fundamentals (https://docs.microsoft.com/en-us/learn/paths/azure-fundamentals/) 
  - 講師指導的課程： AZ-900: Azure Fundamentals (https://docs.microsoft.com/en-us/learn/certifications/courses/az-900t01)
  
  如果您是 Azure Administration 的新手，請考慮使用&#58;
  - 免費線上：Azure Administrators 的先決條件 (https://docs.microsoft.com/en-us/learn/paths/az-104-administrator-prerequisites/)
  - AZ-104: Microsoft Azure Administrator (https://docs.microsoft.com/en-us/learn/certifications/courses/az-104t00) 和 AZ-010: Azure Administration for AWS SysOps (https://docs.microsoft.com/en-us/learn/certifications/courses/az-010t00)
  
  如果您是 Azure Developer 的新手，請考慮使用&#58;
  - 免費線上： 創建無伺服器應用程式(https://docs.microsoft.com/en-us/learn/paths/create-serverless-applications/)
  - 講師指導的課程：AZ-204：Developing Solutions for Microsoft Azure (https://docs.microsoft.com/en-us/learn/certifications/courses/az-204t00) 和 AZ-020: Microsoft Azure Solutions for AWS Developers (https://docs.microsoft.com/en-us/learn/certifications/courses/az-020t00)
outlineSection: |-
  ### 模組 1&#58; 規劃 DevOps
  #### 課程
  - 轉換規劃
  - 專案選擇
  - 團隊結構
  - 移轉到 Azure DevOps

  #### 實驗室&#58; 使用 Azure Boards 進行敏捷規劃和組合管理

  完成本模組後，學員將能夠&#58;
  - 計畫有共同目標和時間表的轉型
  - 選擇專案並確定項目指標和關鍵績效指標 (KPI's)
  - 創建團隊和敏捷的組織結構
  - 設計工具集成策略
  - 設計授權管理策略（例如，Azure DevOps 和 GitHub 用戶）
  - 設計從工作專案到工作軟體的端到端可追溯性策略
  - 設計身份驗證和訪問策略
  - 設計集成本地和 cloud 資源的策略
  
  
  ### 模組 2&#58; 源控制入門
  #### 課程
  - 什麼是源控制
  - 源控制的好處
  - 源控制系統的類型
  - Azure Repos 簡介
  - GitHub 簡介
  - 從 Team Foundation Version Control (TFVC) 遷移到 Azure Repos 中的 Git
  
  ####  實驗室&#58; Azure Repos 中的 Git 版本控制
  
  完成本模組後，學員將能夠&#58;
  - 描述使用源控制的好處
  - 描述 Azure Repos 和 GitHub
  - 從 TFVC 遷移到 Git
  
  
  ### 模組 3&#58; 管理技術負債
  #### 課程
  - 識別技術負債
  - 團隊內的知識共用
  - 具有 Codespaces 的現代化開發環境
  
  #### 實驗室 &#58; 使用 Azure Project Wikis 共用團隊知識
  
  完成本模組後，學員將能夠&#58;
  - 管理代碼品質，包括技術負債 SonarCloud 和其他工具解決方案
  - 建立關於代碼品質的組織知識
  
  
  ### 模組 4&#58; 使用 Git 進行企業 DevOps
  #### 課程
  - 如何構建您的 Git Repo
  - Git 分支工作流程
  - 與 Azure Repos 中的 Pull 請求協作
  - 為什麼關心 Git Hooks
  - 培養內部來源
  - 管理 Git 存儲庫
  
  #### 實驗室 &#58; 在 Azure Repos 中使用 Git 進行版本控制
  
  完成本模組後，學員將能夠&#58;
  - 說明如何構建 Git repos 
  - 描述 Git 分支工作流程
  - 利用 pull 請求進行協作和代碼評審 
  - 利用 Git 鉤實現自動化
  - 使用 Git 培養整個組織的內部資源
  
  
  ### 模組 5&#58; 配置 Azure Pipelines
  #### 課程
  - DevOps 中的管道概念
  - Azure Pipelines
  - 評估託管代理與自託管代理的使用情況
  - 代理池
  - 管道和併發
  - Azure DevOps 和開源項目（公共專案）
  - Azure Pipelines YAML 與 Visual Designer
  
  #### 實驗室 &#58; 配置代理池和瞭解管道樣式
  
  完成本模組後，學員將能夠&#58;
  - 說明 Azure Pipelines 管道及其元件的作用
  - 配置代理以在 Azure Pipelines 中使用
  
  
  ### 模組 6&#58; 使用 Azure Pipelines 實現持續集成
  #### 課程
  - 持續集成概述
  - 實施構建策略
  - 與 Azure Pipelines 集成
  - 將外部源控制與 Azure Pipelines 集成
  - 設置自託管代理
  
  #### 實驗室 &#58; 支持與 Azure Pipelines 的持續集成
  
  #### 實驗室 &#58; 將外部源控制與 Azure Pipelines 集成
  
  完成本模組後，學員將能夠&#58;
  - 說明為什麼持續集成很重要
  - 使用 Azure Pipelines 實現持續集成
  
  
  ### 模組 7&#58; 管理應用程式配置和機密
  #### 課程
  - 安全概論
  - 實施安全的開發過程
  - 重新思考應用程式配置資料
  - 管理機密、權杖和證書
  - 與身份管理系統集成
  - 實現應用程式配置
  
  #### 實驗室 &#58; 將 Azure Key Vault 與 Azure DevOps 集成
  
  完成本模組後，學員將能夠&#58;
  - 管理應用程式配置和機密
  - 將 Azure Key Vault 與管道集成
  
  
  ### 模組 8&#58; 實現與 GitHub 操作的持續集成
  #### 課程
  - GitHub 操作
  - 與 GitHub 操作的持續集成
  - 確保 GitHub 操作的機密性
  
  #### 實驗室 &#58; GitHub 操作持續集成
  
  完成本模組後，學員將能夠&#58;
  - 創建並使用 GitHub 操作和工作流程
  - 實現與 GitHub 操作的持續集成
  
  
  ### 模組 9&#58; 設計和實現依賴管理策略
  #### 課程
  - 打包依賴項
  - 包管理
  - 遷移和整合工件
  - 包安全
  - 實施版本控制策略
  
  #### 實驗室 &#58; 使用 Azure Artifacts 進行包管理
  
  完成本模組後，學員將能夠&#58;
  - 推薦工件管理工具和實踐
  - 提取公共包以實現共用和重用
  - 遷移和整合工件
  - 遷移和整合源控制措施
  
  
  ### 模組 10&#58; 設計發佈策略
  #### 課程
  - 連續交付簡介
  - 發佈策略建議
  - 構建高品質發佈管道
  - 選擇合適的發佈管理工具
  
  #### 實驗室 &#58; 使用發佈門控制部署
  
  #### 實驗室 &#58; 創建發佈儀錶板
  
  完成本模組後，學員將能夠&#58;
  - 區分發佈和部署
  - 定義發佈管道的元件
  - 說明設計發佈策略時需要考慮的事項
  - 將發佈與發佈過程進行分類，並概述如何控制二者的品質
  - 描述發佈門的原理以及如何處理發佈說明和文檔
  - 選擇發佈管理工具
  
  ### 模組 11&#58; 使用 Azure Pipelines 實現連續部署
  #### 課程
  - 創建發佈管道
  - 提供和配置環境
  - 管理和模組化任務和範本
  - 配置自動集成和功能測試自動化
  - 自動化運行狀況檢查
  
  #### 實驗室 &#58; 使用 YAML 將管道配置為代碼
  
  #### 實驗室 &#58; 設置和運行功能測試
  
  完成本模組後，學員將能夠&#58;
  - 說明 Azure DevOps 和其他發佈管理工具中使用的術語
  - 描述構建和發佈任務是什麼，它可以做什麼以及一些可用的部署任務
  - 說明為什麼有時需要在一個發佈管道中執行多個發佈作業
  - 區分多代理和多配置發佈作業
  - 在發佈管道中使用發佈變數和階段變數
  - 使用服務連接安全地部署到環境
  - 列出通過使用警報、服務掛鉤和報告檢查管道運行狀況和發佈的不同方法
  
  
  ### 模組 12&#58; 實現適當的部署模式
  #### 課程
  - 部署模式簡介
  - 實施藍綠部署
  - 功能切換
  - 金絲雀發佈
  - 暗發佈
  - AB 測試
  - 漸進式曝光部署
  
  #### 實驗室 &#58; 使用 LaunchDarkly 和 Azure DevOps 進行特性標誌管理
  
  完成本模組後，學員將能夠&#58;
  - 描述部署模式
  - 實施藍綠部署
  - 實施金絲雀發佈
  - 實施漸進式曝光部署
  
  
  ### 模組 13&#58; 使用 Azure 工具管理基礎設施和配置
  #### 課程
  - 作為代碼和配置管理的基礎設施
  - 使用 ARM 範本創建 Azure 資源 
  - 使用 Azure CLI 創建 Azure 資源 
  - 使用 DevOps 實現 Azure 自動化
  - 所需狀態配置 (DSC)
  
  #### 實驗室 &#58; 使用 Resource Manager Templates 的 Azure 部署
  
  完成本模組後，學員將能夠&#58;
  - 將基礎設施和配置應用為代碼原則。
  - 使用 Microsoft 自動化技術（如 ARM 範本、 PowerShell 和 Azure CLI）部署和管理基礎設施
  
  
  ### 模組 14&#58; 作為 Azure 可用代碼工具的協力廠商基礎設施
  #### 課程
  - Chef
  - Puppet
  - Ansible
  - Terraform
  
  #### 實驗室 &#58; 使用 Terraform 和 Azure Pipelines 在 Cloud 中自動化基礎設施部署
  
  #### 實驗室 &#58; 在 Azure 上使用 Chef 部署應用程式
  
  #### 實驗室 &#58; 在 Azure 上使用 Puppet 部署應用程式
  
  #### 實驗室 &#58;  Azure 中的 Ansible
  
  完成本模組後，學員將能夠&#58;
  - 在 Azure 中使用協力廠商工具和服務（如Chef、Puppet、Ansible和Terraform）部署和配置基礎設施
  
  
  ### 模組 15&#58; 使用 Docker 管理容器
  #### 課程
  - 實施容器構建策略
  - 實現 Docker 多階段構建
  
  #### 實驗室 &#58; 使用 Azure 更新現有的 ASP.NET
  
  完成本模組後，學員將能夠&#58;
  - 實現容器策略，包括容器與虛擬機器的區別以及微服務如何使用容器
  - 使用 Docker 實現容器
  - 實施 Docker 多階段構建
  
  
  ### 模組 16&#58; 創建和管理 Kubernetes 服務基礎設施
  #### 課程
  - Azure Kubernetes Service
  - Kubernetes 工具
  - 將 AKS 與 Pipelines 集成
  
  #### 實驗室 &#58; 將多容器應用程式部署到 Azure Kubernetes Service
  
  完成本模組後，學員將能夠&#58;
  - 部署和配置託管 Kubernetes 群集
  
  
  ### 模組 17&#58; 為開發團隊實施回饋
  #### 課程
  - 實現跟蹤系統使用情況、功能使用情況和流程的工具
  - 實現移動應用程式崩潰報告資料的路由
  - 開發監控和狀態儀錶板
  - 集成和配置票務系統
  
  #### 實驗室 &#58; 使用 Application Insights 監控應用程式性能
  
  完成本模組後，學員將能夠&#58;
  - 實現跟蹤系統使用情況、功能使用情況和流程的工具
  - 為用戶端應用程式配置崩潰報告集成
  - 實現用戶端應用程式崩潰報告資料的路由
  - 開發監控和狀態儀錶板
  - 將票務系統與開發團隊的工作管理集成並進行配置
  
  
  ### 模組 18&#58; 實施系統回饋機制
  #### 課程
  - 網站可靠性工程
  - 設計衡量最終使用者滿意度的實踐
  - 設計捕獲和分析使用者回饋的流程
  - 設計流程以自動化應用程式分析
  - 管理警報
  - 進行無懈可擊的回顧，創造公正的文化
  
  #### 實驗室 &#58; Integration between Azure DevOps and Teams
  
  完成本模組後，學員將能夠&#58;
  - 定義網站可靠性工程
  - 設計衡量最終使用者滿意度並分析使用者回饋的流程
  - 設計流程以自動化應用程式分析
  - 管理警報並減少無意義和不可操作的警報
  - 進行無懈可擊的回顧，創造公正的文化
  
  
  ### 模組 19&#58; 在 DevOps 項目中實現安全性
  #### 課程
  - 管道安全
  - Azure Security Center
  
  #### 實驗室 &#58; 在 Azure DevOps Pipeline 中實現安全性和合規性
  
  完成本模組後，學員將能夠&#58;
  - 為發佈管道和應用程式基礎設施定義基礎設施和配置策略以及適當的工具集
  - 在應用程式基礎設施中實現合規性和安全性
  
  
  ### 模組 20&#58; 驗證代碼庫的合規性
  #### 課程
  - 開源軟體
  - 管理安全性和合規性策略
  - 集成許可證和漏洞掃描
  
  #### 實驗室 &#58; 使用 SonarQube 和 Azure DevOps 管理技術負債 
  
  完成本模組後，學員將能夠&#58;
  - 描述集成開源軟體的潛在挑戰
  - 檢查開源套裝軟體的安全性和許可證合規性
  - 管理組織安全性和合規性策略
  - 將許可證和漏洞掃描集成到構建和部署管道中
  - 配置構建管道以訪問包安全性和許可等級

