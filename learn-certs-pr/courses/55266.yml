### YamlMime:Course
title: Building web apps with Angular and TypeScript
metadata:
  title: 'Course 55266-A: Building web apps with Angular and TypeScript'
  description: 'Course 55266-A: Building web apps with Angular and TypeScript'
uid: course.55266
courseNumber: '55266-A'
hoursToComplete: 72
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: 使用 TypeScript 設置和編寫應用程式。
- skill: 創建和管理 Angular 應用程式。
- skill: 使用資料綁定來更新您的頁面。
- skill: 將複雜介面分割為不同元件。
- skill: 編制它們自己的指令和管道。
- skill: 創建含驗證的複雜表單。
- skill: 與 REST 後端通信
- skill: 編寫含用戶端路由的單頁應用程式。
learningPartnersLink: /learn/certifications/partners
locales:
- en
levels:
- intermediate
roles:
- developer
summary: |-
  最近幾年，大量的努力已被投入到使 HTML 和 JavaScript 成為網頁應用程式而非僅僅網頁內容更好的地方。使用 Angular，您可以利用這些新的、現代的概念將其提升到更高的層次。通過使用元件化的嘗試，Angular 配備的比以往任何時候都好以創建高效的資料驅動型網頁應用程式。Angular 負責資料綁定、導航和伺服器通信；TypeScript 讓您使用 JavaScript 在任何流覽器上都必須提供的最先進的功能。如強大的輸入功能讓您的應用程式更加的可維護、獲得更好的結構且更加靈活。該課程將會持續更新到 Angular 的最新版本，當前版本是 Angular 6。享受 Google Angular 和 Microsoft TypeScript 的完美協同。

  #### 受眾概覽
  該課程的目標受眾是正在尋找儘快啟動進入 Angular 和 TypeScript 領域的網頁開發人員。該課程的參與者需要具有對 JavaScript、HTML 和 CSS 及對 node.js 和 npm 概念的良好理解。
prerequisitesSection: |-
  參加此課程之前，學生必須&#58;
  - 對 JavaScript 具有良好的理解。
  - 對 HTML 和 CSS 具有基礎的理解。
  - 至少擁有 node.js 和 npm 的概念。
  網頁開發的 IDE 如 Visual Studio Code 或 WebStorm。
outlineSection: |-
  ### 模組 1&#58; Angular 介紹
  在此模組中，您將理解 Angular 的各個方面及為什麼其在現代的網頁開發中如此重要。
  #### 課程
  - 網頁應用程式的發展進程
  - Angular Core 和模組
  - TypeScript、Dart、簡單的舊版 JavaScript

  完成此模組後，學生將能夠&#58;
  - 擁有對現代網頁 UI 技術和它們在現代開發中所扮演的角色。


  ### 模組 2&#58; 擁有 TypeScript 的強類型 JavaScript
  讓我們面對它吧&#58; JavaScript 的設計從來都不是針對大型應用程式的。很多架構都順從於複雜的代碼如介面，而強類型卻是完全缺席的。很多最新且酷的 JS 功能都沒有實施於目前的流覽器中。TypeScript 是兩種問題的解決方案；讓您能夠編寫
  現代、應用級的JavaScript。
  #### 課程
  - 編寫應用級 JavaScript
  - 使用 TypeScript 型別安全的 JavaScript 開發
  - 實施型別、類和繼承
  - 命名空間和模組


  #### 實驗室 &#58; 玩具店
  - 以 TypeScript 專案開始
  - 製作模組&#58; 產品、類、訂單
  - 創建購物車
  - 使用外部庫
  - 向 HTML 頁面添加代碼

  完成此模組後，學生將能夠&#58;
  - 獲得對 TypeScript 好處的理解
  - 使用 TypeScript 的核心功能
  - 創建新 TypeScript 項目
  - 編譯和運行 TypeScript 專案


  ### 模組 3&#58; 核心概念
  在此模組中，您將熟悉用於任何 Angular 應用程式最重要的構建模組。
  這是所有後續章節的基礎。
  #### 課程
  - 元件
  - 模組
  - 服務
  - 工具


  #### 實驗室 &#58; 檢查首個專案
  - 打開一個正在運行的專案
  - 應用程式的元素
  - 載入模組
  - tsconfig.json

  完成此模組後，學生將能夠&#58;
  - 理解元件和服務的目的。
  - 將元素和服務歸類到模組中。
  使用 Angular 工具。

  ### 模組 4&#58; 資料綁定
  資料綁定能讓您在編寫 JavaScript 代碼時忘記 HTML。它能讓您將資料注入視圖而無需在兩者之間創建強依賴關係。這將會生成更加靈活、可測試且可維護的代碼。
  #### 課程
  - 綁定的重要性
  - 元件視圖
  - 結構性指令
  - 本地模版變數
  - 值轉換
  - 視圖組件


  #### 實驗室 &#58; 有資料綁定的工作管理員
  - 模組
  - 顯示任務列
  - 樣式
  - 添加任務

  完成此模組後，學生將能夠&#58;
  - 使用資料綁定創建和更新視圖。
  - 在元件中處理使用者互動。
  - 參考有本地模版變數的元素。
  - 為值轉換使用管道。


  ### 模組 5&#58; 元件
  在此模組中，我們將更加深入地學習元件。您將會學習如何創建元件的層次結構及如何在其之間進行通信。
  #### 課程
  - 使用多個元件
  - 輸入和輸出
  - ViewChild 和 ContentChild
  - EventEmitter
  - 指令生命週期


  #### 實驗室 &#58; 工作管理員&#58; 使用多個元件
  - 添加一些樣式
  - TaskCreator 元件
  - TaskCard 元件
  - TaskList 元件
  - 應用程式元件
  - 註冊元件

  完成此模組後，學生將能夠&#58;
  - 將複雜元件分割為多個元件
  - 設置父子通信
  - 使用各種不同生命週期的鉤子


  ### 模組 6&#58; 屬性型指令
  如果您想向一個現有的元素添加自訂行為該怎麼辦？在該模組中，您將探索現有的指令如 NgClasses 和 NgStyle；並且學習如何創建您自己的指令。
  #### 課程
  - 屬性型指令是什麼？
  - 內置屬性型指令
  - 自訂屬性型指令

  完成此模組後，學生將能夠&#58;
  - 理解屬性型指令的作用。
  - 使用內置屬性型指令。
  創建您自己的屬性型指令。

  ### 模組 7&#58; 結構型指令
  使用結構型指令您可以在您的 HTML 中修改流。如，您是如何基於自己的資料而不將 HTML 寫入您的 JavaScript 來動態生成 HTML？
  #### 課程
  - 結構型指令是什麼？
  - 內置結構型指令
  - 模版
  - 自訂結構型指令

  完成此模組後，學生將能夠&#58;
  - 理解結構型指令的作用。
  - 使用內置結構型指令。
  - 創建您自己的結構型指令。


  ### 模組 8&#58; Dependency Injection 和 Providers
  Dependency Injection (DI) 是將兩個強耦合物件捕獲並將其分離的藝術。這會幫助您編寫可理解、可維護且可測試的代碼。這並不是 Angular 中的一個選擇也非&#58;您必須要做的。Angular 有基於 Providers 的一整套機制來支持 DI，您將在此模組中探索。
  #### 課程
  - 術語
  - Dependency Injection 基礎
  - 服務
  - 供應商
  - 工廠
  - 注入權杖


  #### 實驗室 &#58; 創建任務服務
  - 實施服務
  - 提供服務
  - 更新 AppComponent
  - 使用真實服務替換類比服務

  完成此模組後，學生將能夠&#58;
  - 創建自己的服務。
  - 在 Angular 中使用各種不同的供應商。
  - 將服務注入到元件和其他服務中。


  ### 模組 9&#58; 管道
  管道是一種在視圖中對值做出微小改動的方便方式。這包括資料的格式化和過濾。管道的使用和可能性擴展很簡單。
  #### 課程
  - 使用管道
  - 內置管道
  - 自訂管道
  - 純與不純


  #### 實驗室 &#58; 溫度管道
  - 在 Kelvin、Celsius 和 Farenheit 中創建顯示溫度的管道
  - 使用您新創建的管道

  完成此模組後，學生將能夠&#58;
  - 使用內置管道。
  - 創建自己的管道。
  - 理解純管道的重要性。


  ### 模組 10&#58; 使用表單
  表單對於任何應用程式都是非常重要的，它能讓管理資料。您需要做更多而不僅僅是資料綁定。您需要驗證、自動格式化、對資料變化做出回應等。Angular 提供了兩種不同的方法來處理這個問題&#58; 即模版驅動型表單和模型驅動型表單。 此模組將探索上述兩類表單。
  #### 課程
  - 表單中有什麼
  - 變化回應
  - 表單生成器
  - 資料驗證


  #### 實驗室 &#58; 任務編輯器表單
  - TaskEditor組件
  - 基本的驗證
  - 多個驗證器
  - 自訂驗證器

  完成此模組後，學生將能夠&#58;
  - 在模版驅動型表單和模型驅動型表單之間選擇。
  - 創建表單並提交資訊。
  - 添加驗證和視覺回饋。


  ### 模組 11&#58; 與伺服器通信
  此模組將教您如何恢復並將資料發送到您的後端。我們將聚焦 REST 並使用 RxJS's Observables 來完成任務。
  #### 課程
  - 發送和接收資料
  - HTTPClient 模組
  - HTTP 攔截器
  - Observables 與 Promises 對比


  #### 實驗室 &#58; 使用 Observables
  - 使用可觀察物件更新元件


  #### 實驗室 &#58; 與伺服器通信
  - 提供 HttpClient 模組
  - 實施 HTTP 服務

  完成此模組後，學生將能夠&#58;
  - 使用 HttpClient 自作 REST調用。
  - 處理有可觀察對象的結果。  


  ### 模組 12&#58; 創建單頁應用程式
  不用一頁一頁地跳動，您可以將您的網站設計成單頁應用程式。這將使您的網站感覺和執行起來更像是一個應用程式。SPA 有很多優勢，但通常很難實施。該模組將教授 Angular 中可用的結構體來創建 SPA。
  #### 課程
  - SPA 是什麼
  - 路由器模組
  - 路由配置
  - 父子導航
  - 路由保護


  #### 實驗室 &#58; 創建 SPA&#58; Rabbit Rescue
  - 使用元件和模版替換靜態 HTML
  - 為每個功能區設置路由
  - 關聯功能區和根區

  完成此模組後，學生將能夠&#58;
  - 創建單頁應用程式。
  - 創建功能區。
  - 為每個功能建立路由。
  - 使用保護攔截導航。

  #### 補充閱讀
  無
